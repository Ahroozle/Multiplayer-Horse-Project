// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "GameFramework/Actor.h"
#include "NPCGeneralTypes.h"
#include "NPCNavigation.generated.h"


// Note: Edges are ONE-WAY only. This is to allow NPCs to understand variations in terrain.
USTRUCT(BlueprintType, meta = (DisplayName = "NPC Navigation Edge"))
struct FNPCNavEdge
{
	GENERATED_USTRUCT_BODY();

	UPROPERTY(EditAnywhere, BlueprintReadOnly)
		FName ToNode;

	UPROPERTY(EditAnywhere, BlueprintReadOnly)
		bool IsLoadingZone;

	/*
		Attributes required to traverse along this edge.
		Failing to have one of these adds 1000 to the cost.
	*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
		FNPCRelevantStateEditor RequiredAttributes;

	/*
		Attributes desired for traversal along the edge.
		Failing to have one of these adds 1 to the cost.
	*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
		FNPCRelevantStateEditor DesiredAttributes;

	/*
		The time taken to traverse along this edge, at walking speed.
		Generated by the World Graph baking process, and used to
		determine where an NPC is when a player begins to enter
		seeing range of the AI (i.e. the same room)
	*/
	UPROPERTY(VisibleAnywhere)
		float TraversalTime;
};

USTRUCT(BlueprintType, meta = (DisplayName = "NPC Navigation Node"))
struct FNPCNavNode
{
	GENERATED_USTRUCT_BODY();

	// The world location of the node
	UPROPERTY(VisibleInstanceOnly, BlueprintReadOnly)
		FVector Location;

	UPROPERTY(EditAnywhere, BlueprintReadOnly)
		TArray<FNPCNavEdge> Neighbors;

	/*
		Attributes of this node, used for
		determining whether this node could
		be a goal node or not.
	*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
		TSet<FName> Attributes;
};

USTRUCT(BlueprintType, meta = (DisplayName = "NPC Navigation Graph"))
struct FNPCNavGraph
{
	GENERATED_USTRUCT_BODY();

	// Map of node names to nodes.
	UPROPERTY(EditInstanceOnly, BlueprintReadOnly)
		TMap<FName, FNPCNavNode> Nodes;
};

UCLASS(meta = (DisplayName = "NPC Navigation Cluster"))
class MPHORSO_API ANPCNavCluster : public AActor
{
	GENERATED_BODY()

#if WITH_EDITOR
	TArray<FBatchedLine> DrawnLineCopies;
#endif

public:
	// Sets default values for this actor's properties
	ANPCNavCluster(const FObjectInitializer& _init);

	virtual void OnConstruction(const FTransform & Transform) override;

	virtual void Destroyed() override;

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditInstanceOnly)
		bool ShowEdges = true;
	UPROPERTY(EditInstanceOnly)
		float EdgeOffsetAmount = 20;
	UPROPERTY(EditInstanceOnly)
		float NodeVisualRadius = 100;

	// Note: Remember to name SceneComponents you want to represent nodes' positions identically to their node!
	UPROPERTY(EditInstanceOnly, BlueprintReadOnly)
		FNPCNavGraph ClusterGraph;

};

UCLASS(meta = (DisplayName = "NPC Navigation Manager"))
class MPHORSO_API ANPCNavManager : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	ANPCNavManager(const FObjectInitializer& _init);

	virtual void OnConstruction(const FTransform & Transform) override;

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Click this button to initiate a bake of all the existing Nav Clusters in the map.
	UPROPERTY(EditInstanceOnly)
		bool Bake = false;

	/*
		How fast does the average entity walk?

		NOTE: Remember to change this if base walking speed changes!
	*/
	UPROPERTY(EditInstanceOnly)
		float TraversalSpeed;

	/*
		NOTE: Do NOT edit the entries!
			Editing the entries can cause inconsistencies with the nav clusters and also will just be overwritten next bake anyway.
	*/
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly)
		FNPCNavGraph WorldGraph;

	UFUNCTION(BlueprintCallable)
		void GetClosestNodeToPoint(FVector Point, FName& PointName);

};


DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FFinishedTraversalNotify, TArray<FName>, NodePath);

UCLASS()
class MPHORSO_API UNPCNavVisitor : public UObject
{
	GENERATED_BODY()

	UPROPERTY()
		TArray<FName> StoredDestAttributes;

	UPROPERTY()
		TArray<FName> NodeQueue;

	UPROPERTY()
		TArray<int> NodeParentQueue;

	UPROPERTY()
		int QueueIterator;

	UPROPERTY()
		TMap<FName, int> VisitedNodes;

	UPROPERTY()
		FTimerHandle TraversalHandle;

	UPROPERTY()
		UObject* StoredWorldContext;

	UPROPERTY()
		ANPCNavManager* StoredNavManager;

	/*
		Determines the cost of an edge during traversal!

		NOTE: to blacklist an edge, remember to add its name as <StartNodeName>_<EndNodeName> to the
		'EdgeBlacklist' Fact (it IS an array fact, remember to separate with commas!)
	*/
	UFUNCTION()
		int DetermineEdgeCost(const FName& StartNodeName, const FNPCNavEdge& Edge);

	UFUNCTION()
		bool NodeIsGoal(const FNPCNavNode& Node);

public:

	UPROPERTY(VisibleDefaultsOnly, BlueprintReadOnly)
		FNPCRelevantStateHandle MemoryStateHandle;

	UPROPERTY(VisibleDefaultsOnly, BlueprintReadOnly)
		FNPCRelevantStateHandle PersonalityStateHandle;

	UPROPERTY(BlueprintAssignable)
		FFinishedTraversalNotify OnFinishedTraversal;

	UFUNCTION(BlueprintCallable, meta = (WorldContext = "WorldContext"))
		void BeginTraversal(UObject* WorldContext, FName StartNodeName, TArray<FName> DestNodeAttributes);

	UFUNCTION()
		void Traverse();

	UFUNCTION()
		void FinishTraversal();

	UFUNCTION(BlueprintCallable, meta = (WorldContext = "WorldContext"))
		void CancelTraversal(UObject* WorldContext);

};


UCLASS(meta = (DisplayName = "NPC Navigation Function Library"))
class MPHORSO_API UNPCNavFuncLib : public UObject
{
	GENERATED_BODY()

public:

	UFUNCTION(BlueprintCallable, meta = (WorldContext = "WorldContext"))
		static ANPCNavManager* GetNavManager(UObject* WorldContext);

};


//UCLASS()
//class MPHORSO_API ANPCNavigation : public AActor
//{
//	GENERATED_BODY()
//	
//public:	
//	// Sets default values for this actor's properties
//	ANPCNavigation();
//
//protected:
//	// Called when the game starts or when spawned
//	virtual void BeginPlay() override;
//
//public:	
//	// Called every frame
//	virtual void Tick(float DeltaTime) override;
//
//	
//	
//};
